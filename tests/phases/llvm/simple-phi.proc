; starting from something like ((lambda (b) (let ([f (if b (lambda (x) x) (lambda (x) '12))]) (f '5))) '#t)

((proc (main mainthis mainargs)
  (let ([hardclo (make-closure hard)])
    (let ([mainnil '()])
      (let ([mainarg '5])
        (let ([mainarglist (prim cons mainarg mainnil)])
          (clo-app hardclo mainarglist))))))
 (proc (hard hardthis hardargs)
  (let ([b (prim car hardargs)])
    (cond-bind f b
      (let ([tret (make-closure identity)]) tret)
      (let ([fret (make-closure ignore)]) fret)
      (let ([joinarg '5])
        (let ([joinnil '()])
          (let ([joinarglist (prim cons joinarg joinnil)])
            (clo-app f joinarglist)))))))
 (proc (id idthis idargs)
  (let ([x (prim car idargs)])
    x))
 (proc (ignore ignorethis ignoreargs)
  (let ([ignoreval '12])
    ignoreval)))
