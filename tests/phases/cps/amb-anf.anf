(let (($promise? (lambda ($p) (let ((a2365 (prim cons? $p))) (if a2365 (let ((a2366 (prim car $p))) (prim eq? a2366 (quote %%promise))) (quote #f)))))) (let (($%raise-handler (quote ()))) (let (($%wind-stack (prim make-vector (quote 1) (quote ())))) (let (($%common-tail (lambda ($x $y) (let (($lx (prim length $x))) (let (($ly (prim length $y))) (let (($loop (prim make-vector (quote 1) (quote ())))) (let (($_1854 (prim vector-set! $loop (quote 0) (lambda ($0x $0y) (let ((a2367 (prim eq? $0x $0y))) (if a2367 $0x (let ((a2368 (prim vector-ref $loop (quote 0)))) (let ((a2369 (prim cdr $0x))) (let ((a2370 (prim cdr $0y))) (a2368 a2369 a2370)))))))))) (let ((a2371 (prim vector-ref $loop (quote 0)))) (let ((a2372 (prim > $lx $ly))) (let ((a2374 (if a2372 (let ((a2373 (prim - $lx $ly))) (prim drop $x a2373)) $x))) (let ((a2375 (prim > $ly $lx))) (let ((a2377 (if a2375 (let ((a2376 (prim - $ly $lx))) (prim drop $y a2376)) $y))) (a2371 a2374 a2377))))))))))))) (let (($%do-wind (lambda ($new) (let (($tail (let ((a2378 (prim vector-ref $%wind-stack (quote 0)))) ($%common-tail $new a2378)))) (let (($_1855 (let (($f (prim make-vector (quote 1) (quote ())))) (let (($_1856 (prim vector-set! $f (quote 0) (lambda ($l) (let ((a2379 (prim eq? $l $tail))) (let ((a2380 (prim not a2379))) (if a2380 (let (($_1857 (let ((a2381 (prim cdr $l))) (prim vector-set! $%wind-stack (quote 0) a2381)))) (let (($_1858 (let ((a2382 (prim car $l))) (let ((a2383 (prim cdr a2382))) (a2383))))) (let ((a2384 (prim vector-ref $f (quote 0)))) (let ((a2385 (prim cdr $l))) (a2384 a2385))))) (prim void)))))))) (let ((a2386 (prim vector-ref $f (quote 0)))) (let ((a2387 (prim vector-ref $%wind-stack (quote 0)))) (a2386 a2387))))))) (let (($0f (prim make-vector (quote 1) (quote ())))) (let (($_1859 (prim vector-set! $0f (quote 0) (lambda ($0l) (let ((a2388 (prim eq? $0l $tail))) (let ((a2389 (prim not a2388))) (if a2389 (let (($_1860 (let ((a2390 (prim vector-ref $0f (quote 0)))) (let ((a2391 (prim cdr $0l))) (a2390 a2391))))) (let (($_1861 (let ((a2392 (prim car $0l))) (let ((a2393 (prim car a2392))) (a2393))))) (prim vector-set! $%wind-stack (quote 0) $0l))) (prim void)))))))) (let ((a2394 (prim vector-ref $0f (quote 0)))) (a2394 $new))))))))) (let (($ccstack (prim make-vector (quote 1) (quote ())))) (let (($fail (prim make-vector (quote 1) (quote ())))) (let (($assert (prim make-vector (quote 1) (quote ())))) (let (($amb (prim make-vector (quote 1) (quote ())))) (let (($letrec1862 (quote ()))) (let (($letrec1863 (lambda () (let ((a2395 (prim vector-ref $ccstack (quote 0)))) (let ((a2396 (prim null? a2395))) (if a2396 ($%raise-handler (quote no-solution)) (let (($next-cc (let ((a2397 (prim vector-ref $ccstack (quote 0)))) (prim car a2397)))) (let (($_1866 (let ((a2398 (prim vector-ref $ccstack (quote 0)))) (let ((a2399 (prim cdr a2398))) (prim vector-set! $ccstack (quote 0) a2399))))) ($next-cc $next-cc))))))))) (let (($letrec1864 (lambda ($b) (if $b (quote #t) (let ((a2400 (prim vector-ref $fail (quote 0)))) (a2400)))))) (let (($letrec1865 (lambda ($lst) (let (($0lst (prim make-vector (quote 1) $lst))) (let (($cc (call/cc (lambda ($%k) (let ((a2403 (let (($%saved-stack (prim vector-ref $%wind-stack (quote 0)))) (lambda ($%x) (let (($_1867 (let ((a2401 (prim vector-ref $%wind-stack (quote 0)))) (let ((a2402 (prim eq? $%saved-stack a2401))) (if a2402 (prim void) ($%do-wind $%saved-stack)))))) ($%k $%x)))))) ((lambda ($u) ($u $u)) a2403)))))) (let ((a2404 (prim vector-ref $0lst (quote 0)))) (let ((a2405 (prim null? a2404))) (if a2405 (let ((a2406 (prim vector-ref $fail (quote 0)))) (a2406)) (let (($head (let ((a2407 (prim vector-ref $0lst (quote 0)))) (prim car a2407)))) (let (($_1868 (let ((a2408 (prim vector-ref $0lst (quote 0)))) (let ((a2409 (prim cdr a2408))) (prim vector-set! $0lst (quote 0) a2409))))) (let (($_1869 (let ((a2410 (prim vector-ref $ccstack (quote 0)))) (let ((a2411 (prim cons $cc a2410))) (prim vector-set! $ccstack (quote 0) a2411))))) $head))))))))))) (let (($_1870 (prim vector-set! $ccstack (quote 0) $letrec1862))) (let (($_1871 (prim vector-set! $fail (quote 0) $letrec1863))) (let (($_1872 (prim vector-set! $assert (quote 0) $letrec1864))) (let (($_1873 (prim vector-set! $amb (quote 0) $letrec1865))) (let (($a (let ((a2412 (prim vector-ref $amb (quote 0)))) (a2412 (quote (2 3 4 5)))))) (let (($0b (let ((a2413 (prim vector-ref $amb (quote 0)))) (a2413 (quote (2 3 4 5 6)))))) (let (($c (let ((a2414 (prim vector-ref $amb (quote 0)))) (a2414 (quote (2 3 4 5)))))) (let (($_1874 (let ((a2415 (prim vector-ref $assert (quote 0)))) (let ((a2416 (prim * $a $a))) (let ((a2417 (prim * $0b $0b))) (let ((a2418 (prim + a2416 a2417))) (let ((a2419 (prim * $c $c))) (let ((a2420 (prim = a2418 a2419))) (a2415 a2420))))))))) (prim list (quote solution) $a $0b $c))))))))))))))))))))))