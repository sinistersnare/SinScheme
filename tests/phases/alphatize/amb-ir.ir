(let (($promise? (lambda ($p) (if (prim cons? $p) (prim eq? (prim car $p) (quote %%promise)) (quote #f))))) (let (($%raise-handler (quote ()))) (let (($%wind-stack (quote ()))) (let (($%common-tail (lambda ($x $y) (let (($lx (prim length $x)) ($ly (prim length $y))) (let (($loop (quote ()))) (let (($_1854 (set! $loop (lambda ($x $y) (if (prim eq? $x $y) $x ($loop (prim cdr $x) (prim cdr $y))))))) ($loop (if (prim > $lx $ly) (prim drop $x (prim - $lx $ly)) $x) (if (prim > $ly $lx) (prim drop $y (prim - $ly $lx)) $y)))))))) (let (($%do-wind (lambda ($new) (let (($tail ($%common-tail $new $%wind-stack))) (let (($_1855 (let (($f (quote ()))) (let (($_1856 (set! $f (lambda ($l) (if (prim not (prim eq? $l $tail)) (let (($_1857 (set! $%wind-stack (prim cdr $l)))) (let (($_1858 ((prim cdr (prim car $l))))) ($f (prim cdr $l)))) (prim void)))))) ($f $%wind-stack))))) (let (($f (quote ()))) (let (($_1859 (set! $f (lambda ($l) (if (prim not (prim eq? $l $tail)) (let (($_1860 ($f (prim cdr $l)))) (let (($_1861 ((prim car (prim car $l))))) (set! $%wind-stack $l))) (prim void)))))) ($f $new)))))))) (let (($ccstack (quote ())) ($fail (quote ())) ($assert (quote ())) ($amb (quote ()))) (let (($letrec1862 (quote ())) ($letrec1863 (lambda () (if (prim null? $ccstack) ($%raise-handler (quote no-solution)) (let (($next-cc (prim car $ccstack))) (let (($_1866 (set! $ccstack (prim cdr $ccstack)))) ($next-cc $next-cc)))))) ($letrec1864 (lambda ($b) (if $b (quote #t) ($fail)))) ($letrec1865 (lambda ($lst) (let (($cc (call/cc (lambda ($%k) ((lambda ($u) ($u $u)) (let (($%saved-stack $%wind-stack)) (lambda ($%x) (let (($_1867 (if (prim eq? $%saved-stack $%wind-stack) (prim void) ($%do-wind $%saved-stack)))) ($%k $%x))))))))) (if (prim null? $lst) ($fail) (let (($head (prim car $lst))) (let (($_1868 (set! $lst (prim cdr $lst)))) (let (($_1869 (set! $ccstack (prim cons $cc $ccstack)))) $head)))))))) (let (($_1870 (set! $ccstack $letrec1862))) (let (($_1871 (set! $fail $letrec1863))) (let (($_1872 (set! $assert $letrec1864))) (let (($_1873 (set! $amb $letrec1865))) (let (($a ($amb (quote (2 3 4 5)))) ($b ($amb (quote (2 3 4 5 6)))) ($c ($amb (quote (2 3 4 5))))) (let (($_1874 ($assert (prim = (prim + (prim * $a $a) (prim * $b $b)) (prim * $c $c))))) (prim list (quote solution) $a $b $c))))))))))))))